services:
  redis:
    image: redis:7.0.0-alpine3.15
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    environment:
     CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
     CELERY_RESULT_BACKEND: "${CELERY_RESULT_BACKEND}"
     DJANGO_SETTINGS_MODULE: "orders.settings"
     EMAIL_HOST: "${EMAIL_HOST}"
     EMAIL_HOST_USER: "${EMAIL_HOST_USER}"
     EMAIL_HOST_PASSWORD: "${EMAIL_HOST_PASSWORD}"
     EMAIL_PORT: "${EMAIL_PORT}"
     EMAIL_USE_SSL: "${EMAIL_USE_SSL}"
    volumes:
      - .:/app
    depends_on:
      - redis
      - postgres
    networks:
      - app-network

  backend:
    build: .
    restart: always
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 orders.wsgi:application"
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - app-network

volumes:
  postgres_data:
  static_volume:

networks:
  app-network:
    driver: bridge
