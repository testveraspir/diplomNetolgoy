name: 'Test Coverage with Celery'
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  coverage:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options:
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options:
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Wait for services
        run: |
          sleep 10

      - name: Start Celery worker
        run: |
          celery -A orders worker -l info -P gevent --detach

      - name: Run tests with coverage
        env:
          POSTGRES_DB_NAME: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          CELERY_BROKER_URL: redis://localhost:6379/0
          CELERY_RESULT_BACKEND: redis://localhost:6379/1
          DJANGO_SETTINGS_MODULE: orders.settings

        run: |
          coverage run --source='.' manage.py test
          coverage xml -o coverage.xml    
          coverage report

      - name: Extract coverage percentage
        id: coverage
        run: |
          COVERAGE=$(grep -oP '(?<=<coverage line-rate=").*?(?=")' coverage.xml | awk '{print $1*100}')
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          echo "COVERAGE_PERCENTAGE=${COVERAGE}" >> $GITHUB_ENV

      - name: Generate badge markdown
        run: |
          COLOR=$(if [ ${COVERAGE_PERCENTAGE} -lt 80 ]; then echo "red"; \
                 elif [ ${COVERAGE_PERCENTAGE} -lt 90 ]; then echo "yellow"; \
                 else echo "brightgreen"; fi)
          
          BADGE_MARKDOWN="![Coverage](https://img.shields.io/badge/Coverage-${COVERAGE_PERCENTAGE}%25-${COLOR}?logo=python)"
          
          echo "=============================================="
          echo "ДИНАМИЧЕСКИЙ БЕЙДЖ ДЛЯ README.md"
          echo "=============================================="
          echo "Замените в вашем README.md строку с бейджем на:"
          echo ""
          echo "${BADGE_MARKDOWN}"
          echo ""
          echo "Текущее покрытие: ${COVERAGE_PERCENTAGE}%"
          echo "=============================================="
          
          # Сохраняем для последующих шагов
          echo "BADGE_MARKDOWN=${BADGE_MARKDOWN}" >> $GITHUB_ENV

      - name: Create workflow summary
        if: always()
        run: |
          echo "### Результаты тестового покрытия" >> $GITHUB_STEP_SUMMARY
          echo "**Текущее покрытие:** ${COVERAGE_PERCENTAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "**Markdown для бейджа:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`markdown" >> $GITHUB_STEP_SUMMARY
          echo "${BADGE_MARKDOWN}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY